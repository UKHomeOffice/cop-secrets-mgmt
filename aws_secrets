#!/usr/bin/env python3

from libs import command_parser, custom_logger, file_handler, aws_handler, drone_handler, data_parser
from botocore.exceptions import ClientError

__version__ = '0.2'


def main():
    error_list = []
    success_list = []

    raw_secrets_data = io_handle.read_file(config_file=config_data['secrets_file'], file_type="yaml")
    if not raw_secrets_data:
        raise ValueError(f"Error: Unable to read: {raw_secrets_data}")

    config_data['secrets']['raw'] = raw_secrets_data
    config_data['secrets']['data'] = data_parser.flatten_seed(raw_secrets_data)

    drone = drone_handler.Drone(data=config_data)
    aws = aws_handler.AWS(data=config_data)
    aws.get_credentials()

    if not config_data['drone']['token']:
        token_name = config_data['drone']['token_name']
        logging.info(f"Drone authorization token not set, trying AWS"
                     f"Getting {config_data['drone']['token_name']} from AWS")
        secret_data = aws.get_secret(secret=token_name)
        config_data['drone']['token'] = secret_data[token_name]

    for secret in config_data['secrets']['data']:
        if secret in config_data['exclusion_lists']['global']:
            secret_key = secret
        else:
            secret_key = f"{config_data['deploy_env']}_secret"

        try:
            secret_value = aws.get_secret(secret=secret_key)
            if options.dry_run:
                success_list.append('Dry run ' + secret_key)
            else:
                drone.update(secret_key=secret_key, secret_value=secret_value)
                success_list.append(secret_key)
        except ClientError as e:
            error_list.append(secret_key + ' ' + e.response['Error']['Message'])

    data_parser.summary_status(success_list, error_list, options.dryrun)
    if len(error_list) > 0:
        exit(1)

    exit(0)


if __name__ == "__main__":
    name = 'aws_secrets'
    # initialise the command line checker, add in all of the options
    cmd_opts = command_parser.Commands(name=name, version=__version__)
    cmd_opts.add_config()
    cmd_opts.add_user_auth()
    cmd_opts.add_dry_run()
    options, args_parser = cmd_opts.set_options()
    # set up the logging
    logging = custom_logger.colourLog(name=name)
    # set up the io handling
    io_handle = file_handler.FileHandler()
    # initialise the config data
    config_data = io_handle.read_file(options.config)
    # parse through the provided options make sure everything is set as required
    # do init sanity checks and config population
    cmd_check = command_parser.CommandCheck(options=options, parser=args_parser, config_data=config_data)
    cmd_check.login()
    cmd_check.get_envs()

    main()
